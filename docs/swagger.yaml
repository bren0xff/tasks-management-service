basePath: /
definitions:
  entity.Task:
    properties:
      date:
        type: string
      id:
        type: string
      summary:
        type: string
      user_id:
        type: string
    type: object
  entity.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
  http.CreateTaskRequest:
    properties:
      date:
        example: "2024-11-12"
        type: string
      summary:
        example: Fix server issue
        type: string
    type: object
  http.LoginRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: securepassword
        type: string
    type: object
  http.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  http.RegisterUserRequest:
    properties:
      email:
        example: fulano.sobre@example.com
        type: string
      name:
        example: Fulano
        type: string
      password:
        example: securepassword
        type: string
      role:
        example: technician
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a REST API for managing tasks performed by technicians and
    managers.
  title: Tasks Management API
  version: "1.0"
paths:
  /tasks:
    get:
      consumes:
      - application/json
      description: Retrieves tasks based on user role
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Task'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Allows a technician to create a new task
      parameters:
      - description: Task Input Data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - tasks
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Email and Password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/http.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Login a user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user with a hashed password
      parameters:
      - description: User Data (excluding ID)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/http.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
